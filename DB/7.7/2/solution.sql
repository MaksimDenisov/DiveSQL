WITH RECURSIVE q AS (
    select id,id as idx
    from Keyword
    union all
    select K.id,q.idx as idx
    from Keyword K, q
    where K.parent_id=q.id
)
select idx,count(1) from q
group by idx
order by idx
--     https://ru.stackoverflow.com/questions/481261/%D0%A0%D0%B5%D0%BA%D1%83%D1%80%D1%81%D0%B8%D0%B2%D0%BD%D1%8B%D0%B5-%D0%B7%D0%B0%D0%BF%D1%80%D0%BE%D1%81%D1%8B-%D1%81%D0%BF%D0%B8%D1%81%D0%BA%D0%B8-%D1%81%D0%BC%D0%B5%D0%B6%D0%BD%D0%BE%D1%81%D1%82%D0%B8
/*    Вот так в postresql выглядят рекурсивные запросы.
     Внутри RECURSIVE всегда должен быть union.
Первая часть union должна выбрать стартовые записи, с которых рекурсия начнется.
Например, если бы нам надо было посчитать не количество потомков,
а получить всех потомков записи с id=0 мы бы в первой части задали условие where id=0.
Вторая часть union это основная рекурсивная часть. Она осуществляет спуск по дереву,
выбирая записи из with и при этом поставляя собственные выбранные записи в этот же with,
после чего она их там видит и использует уже их id.
Что бы правильно посчитать записи нам надо знать изначальный id с которого начала выбираться ветвь,
для этого приходится в первом подзапросе выбрать id второй раз и назвать его по другому,
потому как просто q.id равен parent.id и у потомка это будет id его непосредственного родителя.
А выбрав id под другим именем, не указанным в where мы получаем именно изначального родителя.

*/
